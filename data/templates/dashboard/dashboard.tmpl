<!-- Demo using Amazon Comprehend API-->
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="icon" type="image/png" href="icon.png">
        <meta name="description" content="Demo using Amazon Comprehend API.">
        <meta name="keywords" content="API,amazon,speech,SDK,tutorial,demo">
        <meta name="author" content="Chandler Mayo">
        <meta property="og:title" content="Read The Room" />
        <meta property="og:type" content="website" />
        <meta property="og:description" content="Demo using Amazon Comprehend API." />
        <meta property="og:site_name" content="Read The Room" />
        <link rel="stylesheet" href="styles.css">
        <title>Read The Room</title>
    </head>
    <body>
        <div class="page-container">
            <div class="header">
                <h1>Read The Room</h1>
                <p>Enable microphone access to perform real-time speech analysis using <a href="https://aws.amazon.com/comprehend/">Amazon Comprehend</a>.</p>
                <hr>
            </div>
            <div class="section group">
                <div class="col span_1">
                    <div id="sentiment-gauge"></div>               
                </div>
                <div class="col span2">
                    <div id="sentiment-history"></div>
                </div>
            </div>
            <div class="header">
                <h2>Detected Key Phrases</h2>
                <div id="key-phrases">
                    <p>Waiting for speech...</p>
                </div>
            </div>
        </div>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/solid-gauge.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script>
        var gaugeOptions = {
            chart: {
                type: 'solidgauge',
                backgroundColor:'rgba(255, 255, 255, 0.2)'
            },

            title: "Audio Sentiment",

            pane: {
                center: ['50%', '85%'],
                size: '140%',
                startAngle: -90,
                endAngle: 90,
                background: {
                    backgroundColor:
                        Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                    innerRadius: '60%',
                    outerRadius: '100%',
                    shape: 'arc'
                }
            },
            // the value axis
            yAxis: {
                stops: [
                    [0.1, '#DF5353'], // red
                    [0.5, '#DDDF0D'], // yellow
                    [0.9, '#55BF3B'] // green
                ],
                lineWidth: 0,
                tickWidth: 0,
                minorTickInterval: null,
                tickAmount: 1,
                labels: {
                y: 16,
                formatter: function () {
                    return this.value ? 'Positive' : 'Negative'
                },
                style: {
                    color: 'black',
                    fontSize:'15px'                }
            }
            },

            tooltip: {
                style: {
                    display: "none",
                }
            },

            plotOptions: {
                solidgauge: {
                    dataLabels: {
                        y: 5,
                        borderWidth: 0,
                        useHTML: true
                    }
                }
            }
        };

        var chartSentiment = Highcharts.chart('sentiment-gauge', Highcharts.merge(gaugeOptions, {
            
            yAxis: {
                min: 0,
                max: 12,
                title: {
                    y: -150,
                    text: 'Current Sentiment',
                    style: {
                        color: 'black',
                        fontSize:'18px'
                    }
                }

            },

            credits: {
                enabled: false
            },

            series: [{
                data: [1],
                name: 'Current Sentiment',
                dataLabels: {
                    enabled: false
                }
            }]

        }));

        var sentimentHistory = Highcharts.chart('sentiment-history', {

            chart: {
                backgroundColor:'rgba(255, 255, 255, 0.2)'
            },

            title: {
                text: 'Sentiment History',
                style: {
                    color: 'black',
                    fontSize:'18px'
                }
            },

            yAxis: {
                title: {
                    text: 'Confidence'
                },
                max: 1
            },

            xAxis: {
                accessibility: {
                    rangeDescription: 'Sentiment history over time'
                },
                title: {
                    text: 'Time'
                },
                labels: {
                    enabled: false
                }
            },

            tooltip: {
                style: {
                    display: "none",
                }
            },

            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle'
            },

            plotOptions: {
                series: {
                    label: {
                        connectorAllowed: false
                    },
                    pointStart: 0
                }
            },

            series: [{
                name: 'Postive',
            }, {
                name: 'Neutral'
            }, {
                name: 'Negative'
            }],

            credits: {
                enabled: false
            },

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: "49%"
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }

        });

        if ('webkitSpeechRecognition' in window) {

            var recognition = new webkitSpeechRecognition();
            recognition.continuous     = true;

            recognition.onstart = function() {
              console.log("Recognition started");
            };

            recognition.onresult = function(event){ // Send text and update charts with response.
                var current = event.resultIndex;
                var transcript = event.results[current][0].transcript;
                let request = new XMLHttpRequest();
                request.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                       var json = JSON.parse(this.response);
                        if (json.Sentiment.Sentiment == "POSITIVE") {
                            chartSentiment.series[0].points[0].update(12);
                        } else if (json.Sentiment.Sentiment == "NEGATIVE") {
                            chartSentiment.series[0].points[0].update(1);
                        } else {
                            chartSentiment.series[0].points[0].update(6);
                        }
                        sentimentHistory.series[0].addPoint([json.Sentiment.SentimentScore.Positive]);
                        sentimentHistory.series[1].addPoint([json.Sentiment.SentimentScore.Neutral]);
                        sentimentHistory.series[2].addPoint([json.Sentiment.SentimentScore.Negative]);
                        document.getElementById('key-phrases').innerHTML = "<p>";
                        for (var i = 0; i < json.KeyPhrases.KeyPhrases.length; i++) {
                            document.getElementById('key-phrases').innerHTML = document.getElementById('key-phrases').innerHTML + "\"" + json.KeyPhrases.KeyPhrases[i].Text + "\" ";
                        }
                        if (json.KeyPhrases.KeyPhrases.length <= 0) {
                            document.getElementById('key-phrases').innerHTML = "<p>No key phrases detected.";
                        }
                        document.getElementById('key-phrases').innerHTML = document.getElementById('key-phrases').innerHTML + "</p>";
                    }
                };
                request.open('POST', '{{.ComprehendAPI}}');
                request.send(transcript);
            };

            recognition.onerror = function(e) {
              console.log("Error");
            };

            recognition.onend = function() {
                console.log("Speech recognition ended");
                recognition.start();
            };

            function start_speech() {
                recognition.lang = 'en-US'; // 'en-US' works too, as do many others
                recognition.maxAlternatives = 1;
                recognition.profanity_filter=false;
                recognition.start();
            }

            start_speech();
        } else {
            alert("Speech recognition API is not supported in your browser.");
        }
        </script> 
   </body>
</html>